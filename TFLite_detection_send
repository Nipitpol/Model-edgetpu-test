import os
import argparse
import cv2
import numpy as np
import time
import importlib.util
import socket
import json
from threading import Thread
import subprocess

def create_socket():
    host = '10.235.171.242'  # Receiver PC IP (update if needed)
    port = 6000
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    return client_socket, host, port

def send_bbox(client_socket, host, port, bbox_data):
    try:
        def convert_np_data(obj):
            if isinstance(obj, np.generic):
                return obj.item()
            elif isinstance(obj, dict):
                return {key: convert_np_data(value) for key, value in obj.items()}
            elif isinstance(obj, list):
                return [convert_np_data(item) for item in obj]
            else:
                return obj
        message = json.dumps(convert_np_data(bbox_data))
        client_socket.sendto(message.encode(), (host, port))
    except Exception as e:
        print(f"Error sending data: {e}")

class VideoStream:
    def __init__(self, resolution=(640, 320), framerate=15):
        self.stream = cv2.VideoCapture(1)  # Use video source 1
        self.stream.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))
        self.stream.set(3, resolution[0])
        self.stream.set(4, resolution[1])
        (self.grabbed, self.frame) = self.stream.read()
        self.stopped = False

    def start(self):
        Thread(target=self.update, args=()).start()
        return self

    def update(self):
        while not self.stopped:
            (self.grabbed, self.frame) = self.stream.read()

    def read(self):
        return self.frame

    def stop(self):
        self.stopped = True
        self.stream.release()

parser = argparse.ArgumentParser()
parser.add_argument('--modeldir', required=True)
parser.add_argument('--graph', default='detect.tflite')
parser.add_argument('--labels', default='labelmap.txt')
parser.add_argument('--threshold', default=0.5)
parser.add_argument('--resolution', default='1280x720')
parser.add_argument('--edgetpu', action='store_true')
args = parser.parse_args()

MODEL_NAME = args.modeldir
GRAPH_NAME = args.graph
LABELMAP_NAME = args.labels
min_conf_threshold = float(args.threshold)
resW, resH = map(int, args.resolution.split('x'))
use_TPU = args.edgetpu

pkg = importlib.util.find_spec('tflite_runtime')
if pkg:
    from tflite_runtime.interpreter import Interpreter
    if use_TPU:
        from tflite_runtime.interpreter import load_delegate
else:
    from tensorflow.lite.python.interpreter import Interpreter
    if use_TPU:
        from tensorflow.lite.python.interpreter import load_delegate

if use_TPU and GRAPH_NAME == 'detect.tflite':
    GRAPH_NAME = 'edgetpu.tflite'

CWD_PATH = os.getcwd()
PATH_TO_CKPT = os.path.join(CWD_PATH, MODEL_NAME, GRAPH_NAME)
PATH_TO_LABELS = os.path.join(CWD_PATH, MODEL_NAME, LABELMAP_NAME)



if use_TPU:
    print("✅ Edge TPU is enabled. Using edgetpu.tflite")
    interpreter = Interpreter(
        model_path=PATH_TO_CKPT,
        experimental_delegates=[load_delegate('libedgetpu.so.1.0')]
    )
else:
    print("⚠️  TPU not used. Running on CPU only.")
    interpreter = Interpreter(model_path=PATH_TO_CKPT)



with open(PATH_TO_LABELS, 'r') as f:
    labels = [line.strip() for line in f.readlines()]
if labels[0] == '???':
    del(labels[0])

if use_TPU:
    interpreter = Interpreter(model_path=PATH_TO_CKPT,
                              experimental_delegates=[load_delegate('libedgetpu.so.1.0')])
else:
    interpreter = Interpreter(model_path=PATH_TO_CKPT)
interpreter.allocate_tensors()



input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
height = input_details[0]['shape'][1]
width = input_details[0]['shape'][2]
floating_model = (input_details[0]['dtype'] == np.float32)
input_mean = 127.5
input_std = 127.5

outname = output_details[0]['name']
if 'StatefulPartitionedCall' in outname:
    boxes_idx, classes_idx, scores_idx = 1, 3, 0
else:
    boxes_idx, classes_idx, scores_idx = 0, 1, 2

boxes = interpreter.get_tensor(boxes_idx)[0]
classes = interpreter.get_tensor(classes_idx)[0]
scores = interpreter.get_tensor(scores_idx)[0]

ALLOWED_CLASS_IDS = [0,25,28,39,43]
THRESHOLD = 0.75


for i in range(int(10)):
        score = scores[i]
        class_id = int(classes[i][0])
        box = boxes[i]

        if score < THRESHOLD:
                continue
        if class_id not in ALLOWED_CLASS_IDS:
                continue

resW, resH = map(int, args.resolution.split('x'))  # <-- Define first
frame_rate_calc = 1
freq = cv2.getTickFrequency()
videostream = VideoStream(resolution=(resW, resH), framerate=30).start()
time.sleep(1)


# GStreamer command using rawvideoparse (fixes "not-negotiated" error)
'''
gst_cmd = [
    'gst-launch-1.0', '-v',
    'fdsrc', 'fd=0',
python3 TFLite_detection_send.py --modeldir=Sample_TFLite_model --edgetpu    '!', 'rawvideoparse',
    f'format=bgr', f'width={resW}', f'height={resH}', 'framerate=30/1',
    '!', 'videoconvert',
    '!', 'x264enc', 'tune=zerolatency', 'speed-preset=ultrafast',
    '!', 'rtph264pay', 'config-interval=1', 'pt=96',
    '!', 'udpsink', 'host=10.235.171.168', 'port=5000'  # Receiver PC IP/Port
]
'''


gst_cmd = [
    'gst-launch-1.0', '-v',
    'fdsrc', 'fd=0',
    '!', 'rawvideoparse',
    f'format=bgr', f'width={resW}', f'height={resH}', 'framerate=30/1',
    '!', 'videoconvert',
    '!', 'queue', 'leaky=downstream' , 'max-size-buffers=1', 'max-size-bytes=0',
    'max-size-time=0',
    '!', 'x264enc', 'tune=zerolatency', 'speed-preset=ultrafast',
    'bitrate=4096', 'key-int-max=15', 'bframes=0',
    '!', 'rtph264pay', 'config-interval=1', 'pt=96',
    '!', 'udpsink', 'host=192.168.144.102', 'port=5000', 'sync=false', 'async=false'
]



gst_process = subprocess.Popen(gst_cmd, stdin=subprocess.PIPE)

client_socket, host, port = create_socket()

while True:
    t1 = cv2.getTickCount()
    frame1 = videostream.read()
    if frame1 is None:
        continue
    frame = frame1.copy()
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    frame_resized = cv2.resize(frame_rgb, (width, height))
    input_data = np.expand_dims(frame_resized, axis=0)

    if floating_model:
        input_data = (np.float32(input_data) - input_mean) / input_std

    interpreter.set_tensor(input_details[0]['index'], input_data)
    interpreter.invoke()

    boxes = interpreter.get_tensor(output_details[boxes_idx]['index'])[0]
    classes = interpreter.get_tensor(output_details[classes_idx]['index'])[0]
    scores = interpreter.get_tensor(output_details[scores_idx]['index'])[0]

    for i in range(len(scores)):
        if ((scores[i] > min_conf_threshold) and (scores[i] <= 1.0)):
            ymin = int(max(1, (boxes[i][0] * resH)))
            xmin = int(max(1, (boxes[i][1] * resW)))
            ymax = int(min(resH, (boxes[i][2] * resH)))
            xmax = int(min(resW, (boxes[i][3] * resW)))

            bbox_data = {
                'label': labels[int(classes[i])],
                'confidence': scores[i],
                'bounding_box': {'xmin': xmin, 'ymin': ymin, 'xmax': xmax, 'ymax': ymax}
            }
            send_bbox(client_socket, host, port, bbox_data)

            cv2.rectangle(frame, (xmin, ymin), (xmax, ymax), (10, 255, 0), 2)
            object_name = labels[int(classes[i])]
            label = '%s: %d%%' % (object_name, int(scores[i]*100))
            labelSize, baseLine = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2)
            label_ymin = max(ymin, labelSize[1] + 10)
            cv2.rectangle(frame, (xmin, label_ymin-labelSize[1]-10),
                          (xmin+labelSize[0], label_ymin+baseLine-10), (255,255,255), cv2.FILLED)
            cv2.putText(frame, label, (xmin, label_ymin-7),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

    try:
        gst_process.stdin.write(frame.tobytes())
    except Exception as e:
        print("GStreamer write error:", e)
        break

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

videostream.stop()
gst_process.stdin.close()
gst_process.terminate()
cv2.destroyAllWindows()

===========================================================================================================================================

Procedure to run detector


====================================================================================================================================
On Coral

1.mdt shell
2.cd tflite1/
3.open GStreamer with Detector
	3.1.python3 TFLite_detection_send.py --modeldir=Sample_TFLite_model --edgetpu		# For preweight is default
	3.2.python3 TFLite_detection_send.py --modeldir=model-for-edgetpu --edgetpu			# For custom weight
	3.3.python3 TFLite_detection_send.py --modeldir=Model-edgetpu-test --edgetpu			# For custom weight all class


=====================================================================================================================================
Before using custom weight
# In Coral board folder tflite1/
1.nano TFLite_detection_sender.py
2.Go to line
	parser.add_argument('--graph', default='model_test.tflite')
	parser.add_argument('--labels', default='labelmap.txt')
	
	2.1.change it from detect.tflite -> model_test.tflite
3.Go to line
	if use_TPU and GRAPH_NAME == 'detect.tflite':
    	GRAPH_NAME = 'edgetpu.tflite'
	
	3.1.change it from detect.tflite -> model_test.tflite
			   edgetpu.tflite -> model_test_edgetpu.tflite
4.save file by ctrl+x and y and enter
5.Run the 3 in "On coral"


=======================================================================================================================================
Receiver code
1.open terminal
2.run this command
	gst-launch-1.0 -v udpsrc port=5000 caps="application/x-rtp,encoding-name=H264, payload=96" ! \
	queue max-size-buffers=1 max-size-time=0 max-size-bytes=0 ! \
	rtph264depay ! \
	avdec_h264 ! \
	videoconvert ! \
	autovideosink sync=false
	

=======================================================================================================================================
check device connect
1.v4l2-ctl --list-devices


========================================================================================================================================
Problem when detect
Out Standing
-Check LAN

========================================================================================================================================

reciever
gst-launch-1.0 -v udpsrc port=5000 caps="application/x-rtp" ! rtph264depay ! avdec_h264 ! videoconvert ! autovideosink


sender

gst-launch-1.0 -v v4l2src device=/dev/video2 ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=192.168.1.4 port=5000

resolution
gst-launch-1.0 -v v4l2src device=/dev/video1 ! videoscale ! video/x-raw,width=640,height=360 ! videoconvert ! x264enc tune=zerolatency bitrate=2000 speed-preset=superfast ! rtph264pay ! udpsink host=192.168.1.4 port=5000


################### NEW version ##############################

sender

gst-launch-1.0 -v v4l2src device=/dev/video1 ! \
image/jpeg,width=1280,height=720,framerate=30/1 ! \
jpegdec ! \
videoconvert ! \
x264enc tune=zerolatency speed-preset=ultrafast bitrate=4096 key-int-max=30 ! \
rtph264pay config-interval=1 pt=96 ! \
udpsink host=192.168.144.102 port=5000

reciver

gst-launch-1.0 -v udpsrc port=5000 caps="application/x-rtp,encoding-name=H264, payload=96" ! \
queue max-size-buffers=1 max-size-time=0 max-size-bytes=0 ! \
rtph264depay ! \
avdec_h264 ! \
videoconvert ! \
autovideosink sync=false



